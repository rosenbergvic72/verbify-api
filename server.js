// server.js
import express from 'express';
import cors from 'cors';
import fetch from 'node-fetch';
import Database from 'better-sqlite3';
import { DateTime } from 'luxon';

const app = express();
app.use(express.json());
app.use(cors({
  origin: '*', // –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –æ–≥—Ä–∞–Ω–∏—á—å —Å–≤–æ–∏–º –¥–æ–º–µ–Ω–æ–º/–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
}));

// ====== –ë–î (SQLite) ======
const db = new Database('data.db');
db.pragma('journal_mode = WAL');
db.exec(`
  CREATE TABLE IF NOT EXISTS devices (
    userId TEXT PRIMARY KEY,
    expoPushToken TEXT NOT NULL,
    language TEXT DEFAULT 'english',
    tz TEXT DEFAULT 'UTC',
    utcOffsetMin INTEGER DEFAULT 0,
    appVersion TEXT,
    updatedAt TEXT
  );
  CREATE TABLE IF NOT EXISTS schedules (
    userId TEXT PRIMARY KEY,
    hour INTEGER NOT NULL,
    minute INTEGER NOT NULL,
    daysOfWeek TEXT,   -- JSON array [0..6] –∏–ª–∏ NULL (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å)
    lastSentKey TEXT,  -- 'YYYY-MM-DDTHH:mm' –≤ TZ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updatedAt TEXT
  );
`);

const upsertDevice = db.prepare(`
  INSERT INTO devices (userId, expoPushToken, language, tz, utcOffsetMin, appVersion, updatedAt)
  VALUES (@userId, @expoPushToken, @language, @tz, @utcOffsetMin, @appVersion, @updatedAt)
  ON CONFLICT(userId) DO UPDATE SET
    expoPushToken=excluded.expoPushToken,
    language=excluded.language,
    tz=excluded.tz,
    utcOffsetMin=excluded.utcOffsetMin,
    appVersion=excluded.appVersion,
    updatedAt=excluded.updatedAt
`);

const upsertSchedule = db.prepare(`
  INSERT INTO schedules (userId, hour, minute, daysOfWeek, lastSentKey, updatedAt)
  VALUES (@userId, @hour, @minute, @daysOfWeek, @lastSentKey, @updatedAt)
  ON CONFLICT(userId) DO UPDATE SET
    hour=excluded.hour,
    minute=excluded.minute,
    daysOfWeek=excluded.daysOfWeek,
    updatedAt=excluded.updatedAt
`);

const deleteSchedule = db.prepare(`DELETE FROM schedules WHERE userId=?`);
const getAllDueJoin = db.prepare(`
  SELECT s.userId, s.hour, s.minute, s.daysOfWeek, s.lastSentKey,
         d.expoPushToken, d.language, d.tz
  FROM schedules s
  JOIN devices d ON d.userId = s.userId
`);

const setLastSentKey = db.prepare(`
  UPDATE schedules SET lastSentKey=?, updatedAt=? WHERE userId=?
`);

// ====== –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ======
function buildMessage(language = 'english') {
  switch ((language || '').toLowerCase()) {
    case '—Ä—É—Å—Å–∫–∏–π':
    case 'ru':
      return { title: '–≠—Ç–æ Verbify!', body: '–ù–µ –∑–∞–±—É–¥—å –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!\n–°–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∫—Ç–∏–∫–∞ ‚Äî –∑–∞–≤—Ç—Ä–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å! üí™' };
    case 'fran√ßais':
    case 'fr':
      return { title: 'C‚Äôest Verbify !', body: 'N‚Äôoublie pas de t‚Äôentra√Æner !\nAujourd‚Äôhui entra√Ænement ‚Äî demain confiance ! üí™' };
    case 'espa√±ol':
    case 'es':
      return { title: '¬°Esto es Verbify!', body: '¬°No olvides practicar!\n¬°Hoy pr√°ctica ‚Äî ma√±ana confianza! üí™' };
    case 'portugu√™s':
    case 'pt':
      return { title: 'Este √© o Verbify!', body: 'N√£o se esque√ßa de praticar!\nHoje pr√°tica ‚Äî amanh√£ confian√ßa! üí™' };
    case 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©':
    case 'ar':
      return { title: 'Ÿáÿ∞ÿß ŸáŸà Verbify!', body: 'ŸÑÿß ÿ™ŸÜÿ≥Ÿé ÿßŸÑÿ™ÿØÿ±Ÿëÿ®!\nÿ™ŸÖÿ±ŸëŸÜ ÿßŸÑŸäŸàŸÖ ‚Äî ÿ´ŸÇÿ© ÿ∫ÿØŸãÿß! üí™' };
    case '·ä†·àõ·à≠·äõ':
    case 'am':
      return { title: '·ã≠·àÖ Verbify ·äê·ãç!', body: '·àõ·àµ·â∞·àõ·à≠·äï ·ä†·âµ·à≠·à≥!\n·ãõ·à¨ ·àõ·àµ·â∞·àõ·à≠ ‚Äî ·äê·åà ·ä•·àù·äê·âµ! üí™' };
    default:
      return { title: 'This is Verbify!', body: 'Don‚Äôt forget to practice!\nPractice today ‚Äî confidence tomorrow! üí™' };
  }
}

// ====== –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—á–∫–∏ –≤ Expo Push ======
async function sendExpoBatch(messages) {
  if (!messages.length) return { ok: true, status: 200, sent: 0 };
  const resp = await fetch('https://exp.host/--/api/v2/push/send', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(messages),
  });
  const data = await resp.json().catch(() => ({}));
  return { ok: resp.ok, status: resp.status, data, sent: messages.length };
}

// ====== –ø—Ä–æ–≤–µ—Ä–∫–∞ ¬´–∫ –∫–æ–º—É –ø–æ—Ä–∞¬ª –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ ======
async function processDueNow() {
  const nowUtc = DateTime.utc();
  const rows = getAllDueJoin.all();

  const toSend = [];
  for (const row of rows) {
    const tz = row.tz || 'UTC';
    let local = nowUtc.setZone(tz);
    if (!local.isValid) local = nowUtc; // fallback

    // –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ (–µ—Å–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω)
    let days = null;
    if (row.daysOfWeek) {
      try { days = JSON.parse(row.daysOfWeek); } catch {}
    }
    if (Array.isArray(days) && days.length) {
      // Luxon: weekday 1..7 (Mon..Sun) -> 0..6 (Sun..Sat)
      const lux = local.weekday; // 1..7
      const dow06 = (lux === 7) ? 0 : lux; // 0..6
      if (!days.includes(dow06)) continue;
    }

    // —Å–æ–≤–ø–∞–ª–∞ –ª–∏ –º–∏–Ω—É—Ç–∞
    if (local.hour !== row.hour || local.minute !== row.minute) continue;

    // –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π
    const sentKey = local.toFormat("yyyy-LL-dd'T'HH:mm");
    if (row.lastSentKey === sentKey) continue;

    const msg = buildMessage(row.language);
    toSend.push({
      to: row.expoPushToken,
      sound: 'default',
      title: msg.title,
      body: msg.body,
      data: { kind: 'daily-reminder', ts: nowUtc.toISO() },
      priority: 'high',
    });

    setLastSentKey.run(sentKey, new Date().toISOString(), row.userId);
  }

  // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á–∞–º–∏ –ø–æ 100
  const CHUNK = 100;
  for (let i = 0; i < toSend.length; i += CHUNK) {
    const batch = toSend.slice(i, i + CHUNK);
    const res = await sendExpoBatch(batch);
    console.log(`[PUSH] batch sent=${res.sent} status=${res.status}`);
    if (!res.ok) console.error('[PUSH] error payload:', res.data);
  }

  return { matched: toSend.length };
}

// ====== API ======

// healthcheck –¥–ª—è Render
app.get('/health', (_req, res) => res.json({ ok: true, ts: new Date().toISOString() }));

// —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–µ–≤–∞–π—Å–∞/—Ç–æ–∫–µ–Ω–∞
app.post('/registerDevice', (req, res) => {
  const { userId, expoPushToken, language, tz, utcOffsetMin, appVersion } = req.body || {};
  if (!userId || !expoPushToken) return res.status(400).json({ error: 'userId and expoPushToken are required' });

  upsertDevice.run({
    userId,
    expoPushToken,
    language: language || 'english',
    tz: tz || 'UTC',
    utcOffsetMin: Number.isFinite(utcOffsetMin) ? utcOffsetMin : 0,
    appVersion: appVersion || 'unknown',
    updatedAt: new Date().toISOString(),
  });

  res.json({ ok: true });
});

// —Å–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
app.post('/schedule', (req, res) => {
  const { userId, hour, minute, daysOfWeek } = req.body || {};
  if (!userId || hour == null || minute == null) return res.status(400).json({ error: 'userId, hour, minute required' });

  const payload = {
    userId,
    hour: Math.max(0, Math.min(23, Number(hour))),
    minute: Math.max(0, Math.min(59, Number(minute))),
    daysOfWeek: daysOfWeek ? JSON.stringify(daysOfWeek) : null,
    lastSentKey: null,
    updatedAt: new Date().toISOString(),
  };
  upsertSchedule.run(payload);
  res.json({ ok: true });
});

// —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
app.delete('/schedule/:userId', (req, res) => {
  deleteSchedule.run(req.params.userId);
  res.json({ ok: true });
});

// (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ ‚Äî —É–¥–æ–±–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
app.get('/debug/all', (_req, res) => {
  const devs = db.prepare('SELECT * FROM devices').all();
  const sch = db.prepare('SELECT * FROM schedules').all();
  res.json({ devices: devs, schedules: sch });
});

// –æ—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–∏–≥–≥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å Render Cron Job
app.post('/cron', async (_req, res) => {
  try {
    const out = await processDueNow();
    res.json({ ok: true, ...out });
  } catch (e) {
    console.error('cron error:', e);
    res.status(500).json({ ok: false, error: String(e) });
  }
});

// === –µ—Å–ª–∏ —É —Ç–µ–±—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ ¬´–Ω–µ —Å–ø—è—â–∏–π¬ª –∏–Ω—Å—Ç–∞–Ω—Å, –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å node-cron:
// import cron from 'node-cron';
// cron.schedule('* * * * *', () => processDueNow().catch(console.error));

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log('Server up on :' + PORT));
